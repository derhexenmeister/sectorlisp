file: lispi/lispi.lisp 

; This is the find first program used to test sectorlisp
;
; Lisp I Programmer's Manual, page 14
;
input: (FF (QUOTE ((A) B C)))
output: A

input: (FF (QUOTE ()))
output: NIL

input: (FF (QUOTE (ALPHA)))
output: ALPHA

input: (FF (QUOTE (ALPHA BETA GAMMA DELTA)))
output: ALPHA

input: (FF (QUOTE ((ALPHA BETA GAMMA DELTA) APPLE BANANA)))
output: ALPHA

input: (FF (QUOTE (((ALPHA A) BETA GAMMA DELTA) APPLE BANANA)))
output: ALPHA

input: (FF (QUOTE ((((ALPHA OMEGA) A) (BETA C D) GAMMA DELTA) APPLE (BANANA PEEL))))
output: ALPHA

; Lisp I Programmer's Manual, page 15
;
input: (SUBST (QUOTE (X A)) (QUOTE B) (QUOTE ((A B) C)))
output: ((A (X A)) C)

input: (SUBST (CONS (QUOTE X) (QUOTE A)) (QUOTE B) (CONS (CONS (QUOTE A) (CONS (CONS (QUOTE X) (QUOTE A)) NIL)) (QUOTE C)))
output: ((A (X∙A))∙C)

input: (SUBST (QUOTE NEW) (QUOTE OLD) (QUOTE (OLD A B C OLD (OLD OLD OLD) D E F OLD)))
output: (NEW A B C NEW (NEW NEW NEW) D E F NEW)

; Test helpers (short circuiting)
;
input: (AND NIL (QUOTE *UNDEFINED))
output: NIL

input: (OR (QUOTE T) (QUOTE *UNDEFINED))
output: T

; Lisp I Programmer's Manual, page 15
input: (EQUAL (QUOTE A) (QUOTE A))
output: T
;
input: (EQUAL (QUOTE A) (QUOTE B))
output: NIL

input: (EQUAL (QUOTE (A B C D (E F) (G H (I) J K) L M N)) (QUOTE (A B C D (E F) (G H (I) J K) L M N)))
output: T
;
input: (EQUAL (QUOTE (A B C D (E F) (G H (I) J K) L M N)) (QUOTE (A B C D (E F) (G H (Z) J K) L M N)))
output: NIL

; Lisp I Programmer's Manual, page 15
;
input: (NULL NIL)
output: T

input: (NULL (QUOTE ()))
output: T

input: (NULL (QUOTE A))
output: NIL

input: (NULL (QUOTE (A B)))
output: NIL

input: (NULL (QUOTE (A (B) C)))
output: NIL

; Lisp I Programmer's Manual, page 16
;
input: (APPEND NIL (QUOTE (A)))
output: (A)

input: (APPEND (QUOTE (A)) NIL)
output: (A)

input: (APPEND (QUOTE (A)) (QUOTE (B)))
output: (A B)

input: (APPEND (QUOTE (A)) (QUOTE (B C)))
output: (A B C)

input: (APPEND (QUOTE (A B)) (QUOTE (C)))
output: (A B C)

input: (APPEND (QUOTE (A B C)) (QUOTE (D E)))
output: (A B C D E)

input: (APPEND (QUOTE (A B C)) (QUOTE (D E F)))
output: (A B C D E F)

input: (APPEND (QUOTE (A B C)) (QUOTE (D E F G)))
output: (A B C D E F G)

; Lisp I Programmer's Manual, page 16
;
input: (AMONG (QUOTE A) NIL)
output: NIL

input: (AMONG (QUOTE A) (QUOTE (A B)))
output: T

input: (AMONG (QUOTE B) (QUOTE (A B)))
output: T

input: (AMONG (QUOTE C) (QUOTE (A B)))
output: NIL

input: (AMONG (QUOTE (A B)) (QUOTE ((A B) (C D) (E F))))
output: T

input: (AMONG (QUOTE (E F)) (QUOTE ((A B) (C D) (E F))))
output: T

input: (AMONG (QUOTE A) (QUOTE ((A B) (C D) (E F))))
output: NIL

; Lisp I Programmer's Manual, page 16
;
input: (LIST (QUOTE A) (QUOTE B))
output: (A∙B)

input: (LIST (QUOTE A) (QUOTE (B C)))
output: (A (B C))

input: (PAIR (QUOTE (A B C)) (QUOTE (X Y Z)))
output: ((A∙X) (B∙Y) (C∙Z))

input: (PAIR (QUOTE (A B C)) (QUOTE (X (Y Z) U)))
output: ((A∙X) (B (Y Z)) (C∙U))

; Lisp I Programmer's Manual, page 16
input: (CAAR (QUOTE ((A B) (C D))))
output: A

input: (CADAR (QUOTE ((A B) (C D))))
output: B

input: (ASSOC (QUOTE A) (QUOTE ((A B) (C D))))
output: B

input: (ASSOC (QUOTE C) (QUOTE ((A B) (C D))))
output: D


; Lisp I Programmer's Manual, page 17
;
; Broken
input: (SUBLIS (QUOTE ((X A) (Y B))) (QUOTE (X Y)))
output: (A B)

input: (SUBLIS (QUOTE ((X (A B)) (Y (B C)))) (QUOTE (X Y)))
output: ((A B) (B C))

input: (SUBLIS (QUOTE ((X (A B)) (Y (B C)))) (QUOTE (X Y X Y)))
output: ((A B) (B C) (A B) (B C))

input: (SUBLIS (QUOTE ((X (A B)) (Y (B C)))) (QUOTE (A (X Y))))
; The manual gives this expected answer which seems incorrect
;output: (A (A B) B C)
output: (A ((A B) (B C)))

; Lisp I Programmer's Manual, page 21
;
input: (MAPLIST (QUOTE ((A B C) (D E F) (G H I))) (QUOTE CAR))
output: (A D G)

input: (MAPLIST (QUOTE ((A B C) (D E F) (G H I))) (QUOTE CDR))
output: ((B C) (E F) (H I))

input: (MAPLIST (QUOTE ((A B C) (D E F) (G H I))) (QUOTE (LAMBDA (X) (CAR (CDR X)))))
output: (B E H)

input: (MAPLIST (QUOTE (((A B C) (D E F)) ((G H I) (J K L)))) (QUOTE CADAR))
output: (B H)

input: (MAPLIST (QUOTE (((A B C) (D E F)) ((G H I) (J K L)))) (QUOTE CAAR))
output: (A G)

; Lisp I Programmer's Manual, page 100
;
input: (COLLAPSE (QUOTE (A B C D E F G)))
output: (A B C D E F G)

input: (COLLAPSE (QUOTE ((A) (B (C D)))))
output: (A B C D)

