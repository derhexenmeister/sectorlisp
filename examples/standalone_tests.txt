;; These are examples/tests which are run in the sectorlisp REPL without loading
;; any other lisp code first.

file: empty.lisp

input: (CONS (QUOTE A) (QUOTE B))
output: (A∙B)

; And we can use .
input: (QUOTE (A . B))
output: (A∙B)

; CAR and CDR work for either input format
input: (CAR (CONS (QUOTE A) (QUOTE B)))
output: A

input: (CDR (CONS (QUOTE A) (QUOTE B)))
output: B

input: (CAR (QUOTE (A . B)))
output: A

input: (CDR (QUOTE (A . B)))
output: B

; However A∙B is one symbol, the bullet has no special significance for input
input: (QUOTE (A∙B))
output: (A∙B)

input: (CAR (QUOTE (A∙B)))
output: A∙B

input: (CDR (QUOTE (A∙B)))
output: NIL

input: (CAR (QUOTE (A∙B C)))
output: A∙B

input: (CDR (QUOTE (A∙B C)))
output: (C)

; Now onto longer lists

input: (QUOTE ((A . B) (C . D)))
output: ((A∙B) (C∙D))

; Same thing
input: (QUOTE ((A . B) (C . D) . NIL))
output: ((A∙B) (C∙D))

; We can cons the above as well
input: (CONS (CONS (QUOTE A) (QUOTE B)) (CONS (CONS (QUOTE C) (QUOTE D)) NIL))
output: ((A∙B) (C∙D))

; And again
input: (QUOTE ((A . B) (C . D)(E . F)))
output: ((A∙B) (C∙D) (E∙F))

input: (CONS (CONS (QUOTE A) (QUOTE B)) (CONS (CONS (QUOTE C) (QUOTE D)) (CONS (CONS (QUOTE E) (QUOTE F)) NIL)))
output: ((A∙B) (C∙D) (E∙F))

